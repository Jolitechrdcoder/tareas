//created by jorge Luis Martinez Suarez
//matriculate: 2018-6244


#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_http_server.h"

#define WIFI_SSID       "room_link"
#define WIFI_PASS       "mecatronicosRD"

#define TAG "ESP32 Web Server"

static httpd_handle_t server = NULL;

static esp_err_t toggle_pin_handler(httpd_req_t *req) {
    char buffer[10];
    int pin_num = req->uri[strlen("/toggle/")]-'0';
    gpio_set_level(pin_num, !gpio_get_level(pin_num));
    sprintf(buffer, "Toggled Pin %d", pin_num);
    httpd_resp_send(req, buffer, strlen(buffer));
    return ESP_OK;
}

static esp_err_t root_handler(httpd_req_t *req) {
    httpd_resp_sendstr(req, "<!DOCTYPE html>"
                          "<html>"
                          "<head>"
                          "<title>ESP32 Control</title>"
                          "<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">"
                          "</head>"
                          "<body>"
                          "<div class=\"container\">"
                          "<h2>ESP32 Control Panel</h2>"
                          "<button class=\"btn btn-primary\" onclick=\"togglePin(0)\">Toggle Pin 0</button>"
                          "<button class=\"btn btn-primary\" onclick=\"togglePin(1)\">Toggle Pin 1</button>"
                          "<button class=\"btn btn-primary\" onclick=\"togglePin(2)\">Toggle Pin 2</button>"
                          "<button class=\"btn btn-primary\" onclick=\"togglePin(3)\">Toggle Pin 3</button>"
                          "<button class=\"btn btn-primary\" onclick=\"togglePin(4)\">Toggle Pin 4</button>"
                          "</div>"
                          "<script>"
                          "function togglePin(pin) {"
                          "  fetch(`/toggle/${pin}`)"
                          "    .then(response => response.text())"
                          "    .then(data => console.log(data))"
                          "    .catch(error => console.error(error));"
                          "}"
                          "</script>"
                          "</body>"
                          "</html>");
    return ESP_OK;
}

httpd_uri_t toggle_pin_uri = {
    .uri = "/toggle/*",
    .method = HTTP_GET,
    .handler = toggle_pin_handler,
    .user_ctx = NULL
};

httpd_uri_t root_uri = {
    .uri = "/*",
    .method = HTTP_GET,
    .handler = root_handler,
    .user_ctx = NULL
};

void wifi_init_sta() {
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);
    esp_wifi_set_storage(WIFI_STORAGE_RAM);

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASS
        },
    };

    esp_wifi_set_mode(WIFI_MODE_STA);
    esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config);
    esp_wifi_start();
}

void app_main() {
    nvs_flash_init();
    tcpip_adapter_init();
    wifi_init_sta();
    gpio_set_direction(GPIO_NUM_0, GPIO_MODE_OUTPUT);
    gpio_set_direction(GPIO_NUM_1, GPIO_MODE_OUTPUT);
    gpio_set_direction(GPIO_NUM_2, GPIO_MODE_OUTPUT);
    gpio_set_direction(GPIO_NUM_3, GPIO_MODE_OUTPUT);
    gpio_set_direction(GPIO_NUM_4, GPIO_MODE_OUTPUT);

    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    config.max_uri_handlers = 8;

    if (httpd_start(&server, &config) != ESP_OK) {
        ESP_LOGE(TAG, "Error starting server!");
        return;
    }

    httpd_register_uri_handler(server, &toggle_pin_uri);
    httpd_register_uri_handler(server, &root_uri);
}
